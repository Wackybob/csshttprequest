#!/usr/bin/python


from __future__ import with_statement
import os
import re
import sys
import glob
import unittest
from subprocess import Popen, PIPE
from csshttprequest import encode, decode


class TestSequenceFunctions(unittest.TestCase):
    def setUp(self):
        self.fixtures = {}
        for filename in glob.glob(os.path.join('test', 'inputs', '*.in')):
            with open(filename) as f:
                self.fixtures[filename.rsplit('.')[0]] = f.read()
    
    def _normalize(self, value):
        return value.rstrip('\n')
    
    def _test_cmd(self, cmd):
        for key in self.fixtures.keys():
            fixture = self.fixtures[key]
            sys.stdout.write("\nTesting %s with %s" % (cmd[1], key))
            pipe = Popen(cmd, stdin=PIPE, stdout=PIPE, close_fds=True)
            pipe.stdin.write(fixture)
            pipe.stdin.close()
            output = decode(self._normalize(pipe.stdout.read()))
            self.assertEqual(output, fixture)
    
    def test_python(self):
        self._test_cmd(['python', 'csshttprequest.py'])
    
    def test_ruby(self):
        self._test_cmd(['ruby', os.path.join('lib', 'csshttprequest.rb')])
    
    def test_php(self):
        self._test_cmd(['php', 'csshttprequest.php'])


if __name__ == '__main__':
    unittest.main()
